tmp <- pds_raw[["E01"]]
dRoplet(x = tmp[, 1], y = tmp[, 2])
# par(mfrow = c(4,4))
# for (i in (names(pds_raw))) {
# try(bioamp(data = pds_raw[[i]], main = i, pch = 19))
# }
#-----------------------------------------------
dRoplet <- function(x = NULL, y = NULL, xlab = "Amp 1", ylab = "Amp 2", bw = 0.1) {
mnm <- function(x) {
res <- (x - min(x, na.rm = TRUE)) / (max(x, na.rm = TRUE) - min(x, na.rm = TRUE))
}
x_mnm <- mnm(x)
y_mnm <- mnm(y)
input <- matrix(data = c(x_mnm, y_mnm), nrow = length(x), ncol = 2, dimnames = list(NULL, c("x", "y")))
abscissa <- density(input[, 1], bw = 0.1)
ordinate <- density(input[, 2], bw = 0.1)
ao_range <- range(abscissa$x,ordinate$x)
peaks_abscissa <- mcaPeaks(abscissa$x,abscissa$y)
peaks_ordinate <- mcaPeaks(ordinate$x,ordinate$y)
left_abscissa <- input[, 1][input[, 1] <= peaks_abscissa$p.min[, 1]]
par(fig = c(0, 0.8, 0.3, 1))
plot(input, main = "", xlab = "", ylab = ylab, xlim = ao_range, ylim = ao_range)
abline(v = peaks_abscissa$p.min[, 1], col = 3)
abline(v = peaks_abscissa$p.max[, 1], col = 2)
abline(h = peaks_ordinate$p.min[, 1], col = 3)
abline(h = peaks_ordinate$p.max[, 1], col = 2)
par(fig = c(0, 0.8, 0, 0.4), new = TRUE)
plot(abscissa, main = "", ylab = "", xlab = xlab)
rug(abscissa$y)
abline(v = peaks_abscissa$p.min[, 1], col = 3)
abline(v = peaks_abscissa$p.max[, 1], col = 2)
par(fig = c(0.8, 1, 0.3 ,1), new = TRUE)
plot(ordinate$y, ordinate$x, type = "l", main = "", ylab = "", xlab = "")
rug(ordinate$y, side = 2)
abline(h = peaks_ordinate$p.min[, 1], col = 3)
abline(h = peaks_ordinate$p.max[, 1], col = 2)
}
tmp <- pds_raw[["E01"]]
dRoplet(x = tmp[, 1], y = tmp[, 2])
test_dpcr <- function(size, times = 4000)
pblapply(1L:times, function(dummy_variable) {
sapply(c(0:5*10, 2:10*50, 6:10*100), function(base_number) {
sapply(c(1, 1:5*10, 2:10*50), function(added_molecules) {
dat <- sim_adpcr(m = base_number, n = size, times = 10000, pos_sums = FALSE, n_panels = 1)
dat2 <- dat
ids <- sample(1L:size, added_molecules)
dat2[ids, ] <- dat2[ids, ] + 1
#sample added below to reshuffle positive wells
counts_data <- data.frame(experiment = c(rep("baseline", 1000), rep("modyfied", 1000)),
counts = as.numeric(c(as.vector(dat) > 0,
sample(as.vector(dat2)) > 0)))
fit <- glm(counts ~ experiment + 0, data = counts_data, family = quasipoisson)
summary(glht(fit, linfct = mcp(experiment = "Tukey")))[["test"]][["pvalues"]]
})
})
})
test_dpcr(1000, 4)
test_dpcr(2000, 4)
test_dpcr(1100, 4)
test_dpcr <- function(size, times = 4000)
pblapply(1L:times, function(dummy_variable) {
sapply(c(0:5*10, 2:10*50, 6:10*100), function(base_number) {
sapply(c(1, 1:5*10, 2:10*50), function(added_molecules) {
dat <- sim_adpcr(m = base_number, n = size, times = 10000, pos_sums = FALSE, n_panels = 1)
dat2 <- dat
ids <- sample(1L:size, added_molecules)
dat2[ids, ] <- dat2[ids, ] + 1
#sample added below to reshuffle positive wells
counts_data <- data.frame(experiment = c(rep("baseline", size), rep("modyfied", size)),
counts = as.numeric(c(as.vector(dat) > 0,
sample(as.vector(dat2)) > 0)))
fit <- glm(counts ~ experiment + 0, data = counts_data, family = quasipoisson)
summary(glht(fit, linfct = mcp(experiment = "Tukey")))[["test"]][["pvalues"]]
})
})
})
test_dpcr(1100, 4)
test_dpcr(2000, 4)
install.packages(biglm)
install.packages("biglm")
library(biglm)
?biglm
?biglgm
?bigglm
fit <- bigglm(counts ~ experiment + 0, data = counts_data, family = quasipoisson)
counts_data
dat2
counts_data <- data.frame(experiment = c(rep("baseline", 1000), rep("modyfied", 1000)),
counts = as.numeric(c(as.vector(dat) > 0,
sample(as.vector(dat2)) > 0)))
fit <- bigglm(counts ~ experiment + 0, data = counts_data, family = quasipoisson)
fit <- glm(counts ~ experiment + 0, data = counts_data, family = quasipoisson)
fit <- bigglm(counts ~ experiment + 0, data = counts_data, family = quasipoisson())
fit
fit <- bigglm(counts ~ experiment + 0, data = counts_data, family = quasipoisson(), maxit=20)
fit
summary(fit)
summary(glht(fit, linfct = mcp(experiment = "Tukey")))[["test"]][["pvalues"]]
test2 <- test_dpcr(2000, 40)
test2
test1_stats <- sapply(1L:length(test2[[1]]), function(position) {
tmp <- sapply(test2, function(test) test[position])
c(mean(tmp), sd(tmp))
})
test_df <- data.frame(t(rbind(rep(c(1, 1:5*10, 2:10*50), 20),
as.vector(sapply(c(0:5*10, 2:10*50, 6:10*100), rep, 15)),
test1_stats)))
colnames(test_df) <- c("added_molecules", "base_number", "mean", "sd")
test_df[["added_molecules"]] <- as.factor(test_df[["added_molecules"]])
test_df[["base_number"]] <- as.factor(test_df[["base_number"]])
test_df[["mean"]] <- cut(test_df[["mean"]], c(0, 0.001, 0.01, 0.05, 0.25, 0.5, 1), include.lowest = TRUE)
ggplot(test_df, aes(x = base_number, y = added_molecules)) +
scale_fill_manual(name = "mean p-value",
values = c("#0072B2", "#56B4E9", "#009E73",
"#F0E442", "#E69F00", "#D55E00")) +
geom_tile(aes(x = base_number, y = added_molecules, fill = mean)) +
theme(legend.background = element_rect(fill="NA")) +
geom_point(aes(x = base_number, y = added_molecules, size = sd), range = c(3, 9)) +
scale_size_continuous(name = "standard deviation\nof p-value") +
scale_x_discrete("Base number of molecules") +
scale_y_discrete("Added number of molecules")
test1_stats <- sapply(1L:length(test1[[1]]), function(position) {
tmp <- sapply(test1, function(test) test[position])
c(mean(tmp), sd(tmp))
})
test_df <- data.frame(t(rbind(rep(c(1, 1:5*10, 2:10*50), 20),
as.vector(sapply(c(0:5*10, 2:10*50, 6:10*100), rep, 15)),
test1_stats)))
colnames(test_df) <- c("added_molecules", "base_number", "mean", "sd")
test_df[["added_molecules"]] <- as.factor(test_df[["added_molecules"]])
test_df[["base_number"]] <- as.factor(test_df[["base_number"]])
test_df[["mean"]] <- cut(test_df[["mean"]], c(0, 0.001, 0.01, 0.05, 0.25, 0.5, 1), include.lowest = TRUE)
ggplot(test_df, aes(x = base_number, y = added_molecules)) +
scale_fill_manual(name = "mean p-value",
values = c("#0072B2", "#56B4E9", "#009E73",
"#F0E442", "#E69F00", "#D55E00")) +
geom_tile(aes(x = base_number, y = added_molecules, fill = mean)) +
theme(legend.background = element_rect(fill="NA")) +
geom_point(aes(x = base_number, y = added_molecules, size = sd), range = c(3, 9)) +
scale_size_continuous(name = "standard deviation\nof p-value") +
scale_x_discrete("Base number of molecules") +
scale_y_discrete("Added number of molecules")
test2 <- test_dpcr(5000, 40)
test2 <- test_dpcr(2000, 40)
test2 <- test_dpcr(5000, 2)
test2
test3 <- test_dpcr(5000, 40)
test3
test1_stats <- sapply(1L:length(test3[[1]]), function(position) {
tmp <- sapply(test3, function(test) test[position])
c(mean(tmp), sd(tmp))
})
test_df <- data.frame(t(rbind(rep(c(1, 1:5*10, 2:10*50), 20),
as.vector(sapply(c(0:5*10, 2:10*50, 6:10*100), rep, 15)),
test1_stats)))
colnames(test_df) <- c("added_molecules", "base_number", "mean", "sd")
test_df[["added_molecules"]] <- as.factor(test_df[["added_molecules"]])
test_df[["base_number"]] <- as.factor(test_df[["base_number"]])
test_df[["mean"]] <- cut(test_df[["mean"]], c(0, 0.001, 0.01, 0.05, 0.25, 0.5, 1), include.lowest = TRUE)
ggplot(test_df, aes(x = base_number, y = added_molecules)) +
scale_fill_manual(name = "mean p-value",
values = c("#0072B2", "#56B4E9", "#009E73",
"#F0E442", "#E69F00", "#D55E00")) +
geom_tile(aes(x = base_number, y = added_molecules, fill = mean)) +
theme(legend.background = element_rect(fill="NA")) +
geom_point(aes(x = base_number, y = added_molecules, size = sd), range = c(3, 9)) +
scale_size_continuous(name = "standard deviation\nof p-value") +
scale_x_discrete("Base number of molecules") +
scale_y_discrete("Added number of molecules")
test2 <- test_dpcr(2000, 40)
plot_dpcrtest <- function(test_data) {
test1_stats <- sapply(1L:length(test3[[1]]), function(position) {
tmp <- sapply(test3, function(test) test[position])
c(mean(tmp), sd(tmp))
})
test_df <- data.frame(t(rbind(rep(c(1, 1:5*10, 2:10*50), 20),
as.vector(sapply(c(0:5*10, 2:10*50, 6:10*100), rep, 15)),
test1_stats)))
colnames(test_df) <- c("added_molecules", "base_number", "mean", "sd")
test_df[["added_molecules"]] <- as.factor(test_df[["added_molecules"]])
test_df[["base_number"]] <- as.factor(test_df[["base_number"]])
test_df[["mean"]] <- cut(test_df[["mean"]], c(0, 0.001, 0.01, 0.05, 0.25, 0.5, 1), include.lowest = TRUE)
ggplot(test_df, aes(x = base_number, y = added_molecules)) +
scale_fill_manual(name = "mean p-value",
values = c("#0072B2", "#56B4E9", "#009E73",
"#F0E442", "#E69F00", "#D55E00")) +
geom_tile(aes(x = base_number, y = added_molecules, fill = mean)) +
theme(legend.background = element_rect(fill="NA")) +
geom_point(aes(x = base_number, y = added_molecules, size = sd), range = c(3, 9)) +
scale_size_continuous(name = "standard deviation\nof p-value") +
scale_x_discrete("Base number of molecules") +
scale_y_discrete("Added number of molecules")
}
plot_dpcrtest(test1)
plot_dpcrtest(test2)
plot_dpcrtest(test3)
plot_dpcrtest(test3)
plot_dpcrtest(test2)
plot_dpcrtest(test1)
plot_dpcrtest <- function(test_data) {
test1_stats <- sapply(1L:length(test_data[[1]]), function(position) {
tmp <- sapply(test_data, function(test) test[position])
c(mean(tmp), sd(tmp))
})
test_df <- data.frame(t(rbind(rep(c(1, 1:5*10, 2:10*50), 20),
as.vector(sapply(c(0:5*10, 2:10*50, 6:10*100), rep, 15)),
test1_stats)))
colnames(test_df) <- c("added_molecules", "base_number", "mean", "sd")
test_df[["added_molecules"]] <- as.factor(test_df[["added_molecules"]])
test_df[["base_number"]] <- as.factor(test_df[["base_number"]])
test_df[["mean"]] <- cut(test_df[["mean"]], c(0, 0.001, 0.01, 0.05, 0.25, 0.5, 1), include.lowest = TRUE)
ggplot(test_df, aes(x = base_number, y = added_molecules)) +
scale_fill_manual(name = "mean p-value",
values = c("#0072B2", "#56B4E9", "#009E73",
"#F0E442", "#E69F00", "#D55E00")) +
geom_tile(aes(x = base_number, y = added_molecules, fill = mean)) +
theme(legend.background = element_rect(fill="NA")) +
geom_point(aes(x = base_number, y = added_molecules, size = sd), range = c(3, 9)) +
scale_size_continuous(name = "standard deviation\nof p-value") +
scale_x_discrete("Base number of molecules") +
scale_y_discrete("Added number of molecules")
}
plot_dpcrtest(test1)
plot_dpcrtest(test2)
plot_dpcrtest(test3)
fit <- bigglm(counts ~ experiment + 0, data = counts_data, family = quasipoisson)
fit <- bigglm(counts ~ experiment + 0, data = counts_data, family = quasipoisson())
?bigglm
fit <- glm(counts ~ experiment + 0, data = counts_data, family = quasipoisson)
fit2 <- bigglm(counts ~ experiment + 0, data = counts_data, family = quasipoisson(),
maxit = 16)
fit2
fit
install.packages("‘biganalytics’
")
install.packages("biganalytics")
install.packages("biganalytics")
install.packages("bigmemory")
install.packages("ellipse")
install.packages("bigmemory")
fit2
summary(fit2)
summary(fit)
str(fit2)
glht\
glht
glht.linfct
multcomp:::glht.linfct
glht(fit2, linfct = mcp(experiment = "Tukey")))
glht(fit2, linfct = mcp(experiment = "Tukey"))
system.time(test_dpcr(10000, 2))
90.51*2000/3600
library(snow)
?snow
system.time(test_dpcr(1000, 2))
library(paralell)
library(paralel)
library(parallel)
?clusterExport
clusterExport(cl, dpcR)
test_dpcr <- function(size, times = 4000, cl)
pblapply(1L:times, function(dummy_variable) {
sapply(c(0:5*10, 2:10*50, 6:10*100), function(base_number) {
parSapply(cl, c(1, 1:5*10, 2:10*50), function(added_molecules) {
dat <- sim_adpcr(m = base_number, n = size, times = 10000, pos_sums = FALSE, n_panels = 1)
dat2 <- dat
ids <- sample(1L:size, added_molecules)
dat2[ids, ] <- dat2[ids, ] + 1
#sample added below to reshuffle positive wells
counts_data <- data.frame(experiment = c(rep("baseline", size), rep("modyfied", size)),
counts = as.numeric(c(as.vector(dat) > 0,
sample(as.vector(dat2)) > 0)))
fit <- glm(counts ~ experiment + 0, data = counts_data, family = quasipoisson)
fit2 <- bigglm(counts ~ experiment + 0, data = counts_data, family = quasipoisson(),
maxit = 16)
summary(glht(fit, linfct = mcp(experiment = "Tukey")))[["test"]][["pvalues"]]
})
})
})
test_dpcr <- function(size, times = 4000, cl)
pblapply(1L:times, function(dummy_variable) {
sapply(c(0:5*10, 2:10*50, 6:10*100), function(base_number) {
dat <- sim_adpcr(m = base_number, n = size, times = 10000, pos_sums = FALSE,
n_panels = 1)
parSapply(cl, c(1, 1:5*10, 2:10*50), function(added_molecules) {
dat2 <- dat
ids <- sample(1L:size, added_molecules)
dat2[ids, ] <- dat2[ids, ] + 1
#sample added below to reshuffle positive wells
counts_data <- data.frame(experiment = c(rep("baseline", size), rep("modyfied", size)),
counts = as.numeric(c(as.vector(dat) > 0,
sample(as.vector(dat2)) > 0)))
fit <- glm(counts ~ experiment + 0, data = counts_data, family = quasipoisson)
summary(glht(fit, linfct = mcp(experiment = "Tukey")))[["test"]][["pvalues"]]
})
})
})
cl <- makeCluster(getOption("cl.cores", 2))
system.time(test_dpcr(1000, 2, cl))
clusterExport(cl, glht)
library(multcomp)
test_dpcr <- function(size, times = 4000, cl)
pblapply(1L:times, function(dummy_variable) {
sapply(c(0:5*10, 2:10*50, 6:10*100), function(base_number) {
dat <- sim_adpcr(m = base_number, n = size, times = 10000, pos_sums = FALSE,
n_panels = 1)
parSapply(cl, c(1, 1:5*10, 2:10*50), function(added_molecules) {
dat2 <- dat
ids <- sample(1L:size, added_molecules)
dat2[ids, ] <- dat2[ids, ] + 1
#sample added below to reshuffle positive wells
counts_data <- data.frame(experiment = c(rep("baseline", size), rep("modyfied", size)),
counts = as.numeric(c(as.vector(dat) > 0,
sample(as.vector(dat2)) > 0)))
library(multcomp)
fit <- glm(counts ~ experiment + 0, data = counts_data, family = quasipoisson)
summary(glht(fit, linfct = mcp(experiment = "Tukey")))[["test"]][["pvalues"]]
})
})
})
system.time(test_dpcr(1000, 2, cl))
?clusterEvalQ
multcomp::glht
summary.glht
multcomp::summary.glht
multcomp::summary
multcomp:::summary.glht
glm
test_dpcr <- function(size, times = 4000, cl)
pblapply(1L:times, function(dummy_variable) {
parSapply(c(0:5*10, 2:10*50, 6:10*100), function(base_number) {
sapply(cl, c(1, 1:5*10, 2:10*50), function(added_molecules) {
dat <- sim_adpcr(m = base_number, n = size, times = 10000, pos_sums = FALSE,
n_panels = 1)
dat2 <- dat
ids <- sample(1L:size, added_molecules)
dat2[ids, ] <- dat2[ids, ] + 1
#sample added below to reshuffle positive wells
counts_data <- data.frame(experiment = c(rep("baseline", size), rep("modyfied", size)),
counts = as.numeric(c(as.vector(dat) > 0,
sample(as.vector(dat2)) > 0)))
fit <- glm(counts ~ experiment + 0, data = counts_data, family = quasipoisson)
multcomp:::summary.glht(multcomp::glht(fit, linfct = mcp(experiment = "Tukey")))[["test"]][["pvalues"]]
})
})
})
system.time(test_dpcr(1000, 2, cl))
test_dpcr <- function(size, times = 4000, cl)
pblapply(1L:times, function(dummy_variable) {
parSapply(cl, c(0:5*10, 2:10*50, 6:10*100), function(base_number) {
sapply(c(1, 1:5*10, 2:10*50), function(added_molecules) {
dat <- sim_adpcr(m = base_number, n = size, times = 10000, pos_sums = FALSE,
n_panels = 1)
dat2 <- dat
ids <- sample(1L:size, added_molecules)
dat2[ids, ] <- dat2[ids, ] + 1
#sample added below to reshuffle positive wells
counts_data <- data.frame(experiment = c(rep("baseline", size), rep("modyfied", size)),
counts = as.numeric(c(as.vector(dat) > 0,
sample(as.vector(dat2)) > 0)))
fit <- glm(counts ~ experiment + 0, data = counts_data, family = quasipoisson)
multcomp:::summary.glht(multcomp::glht(fit, linfct = mcp(experiment = "Tukey")))[["test"]][["pvalues"]]
})
})
})
system.time(test_dpcr(1000, 2, cl))
test_dpcr <- function(size, times = 4000, cl)
pblapply(1L:times, function(dummy_variable) {
parSapply(cl, c(0:5*10, 2:10*50, 6:10*100), function(base_number) {
sapply(c(1, 1:5*10, 2:10*50), function(added_molecules) {
dat <- dpcR::sim_adpcr(m = base_number, n = size, times = 10000, pos_sums = FALSE,
n_panels = 1)
dat2 <- dat
ids <- sample(1L:size, added_molecules)
dat2[ids, ] <- dat2[ids, ] + 1
#sample added below to reshuffle positive wells
counts_data <- data.frame(experiment = c(rep("baseline", size), rep("modyfied", size)),
counts = as.numeric(c(as.vector(dat) > 0,
sample(as.vector(dat2)) > 0)))
fit <- glm(counts ~ experiment + 0, data = counts_data, family = quasipoisson)
multcomp:::summary.glht(multcomp::glht(fit, linfct = mcp(experiment = "Tukey")))[["test"]][["pvalues"]]
})
})
})
system.time(tmp <- test_dpcr(1000, 2, cl))
tmp
test_dpcr_slow <- function(size, times = 4000)
pblapply(1L:times, function(dummy_variable) {
sapply(c(0:5*10, 2:10*50, 6:10*100), function(base_number) {
sapply(c(1, 1:5*10, 2:10*50), function(added_molecules) {
dat <- dpcR::sim_adpcr(m = base_number, n = size, times = 10000, pos_sums = FALSE,
n_panels = 1)
dat2 <- dat
ids <- sample(1L:size, added_molecules)
dat2[ids, ] <- dat2[ids, ] + 1
#sample added below to reshuffle positive wells
counts_data <- data.frame(experiment = c(rep("baseline", size), rep("modyfied", size)),
counts = as.numeric(c(as.vector(dat) > 0,
sample(as.vector(dat2)) > 0)))
fit <- glm(counts ~ experiment + 0, data = counts_data, family = quasipoisson)
multcomp:::summary.glht(multcomp::glht(fit, linfct = mcp(experiment = "Tukey")))[["test"]][["pvalues"]]
})
})
})
system.time(tmp <- test_dpcr(1000, 2, cl))
system.time(tmp <- test_dpcr_slow(1000, 2))
tmp
tmp
system.time(tmp <- test_dpcr(1000, 10, cl))
system.time(tmp <- test_dpcr_slow(1000, 10))
tmp
stopCluster(cl)
cl <- makeCluster(getOption("cl.cores", 4))
system.time(tmp <- test_dpcr(10000, 40, cl))
stopCluster(cl)
test_dpcr_slow <- function(size, times = 4000)
pblapply(1L:times, function(dummy_variable) {
sapply(c(0:5*10, 2:10*50, 6:10*100), function(base_number) {
sapply(c(1, 1:5*10, 2:10*50), function(added_molecules) {
dat <- dpcR::sim_adpcr(m = base_number, n = size, times = 10000, pos_sums = FALSE,
n_panels = 1)
dat2 <- dat
ids <- sample(1L:size, added_molecules)
dat2[ids, ] <- dat2[ids, ] + 1
#sample added below to reshuffle positive wells
counts_data <- data.frame(experiment = c(rep("baseline", size), rep("modyfied", size)),
counts = as.numeric(c(as.vector(dat) > 0,
sample(as.vector(dat2)) > 0)))
fit <- glm(counts ~ experiment + 0, data = counts_data, family = quasipoisson)
multcomp:::summary.glht(multcomp::glht(fit, linfct = multcomp::mcp(experiment = "Tukey")))[["test"]][["pvalues"]]
})
})
})
stopCluster(cl)
cl <- makeCluster(getOption("cl.cores", 4))
system.time(tmp <- test_dpcr(10000, 40, cl))
stopCluster(cl)
test_dpcr_slow <- function(size, times = 4000)
pblapply(1L:times, function(dummy_variable) {
sapply(c(0:5*10, 2:10*50, 6:10*100), function(base_number) {
sapply(c(1, 1:5*10, 2:10*50), function(added_molecules) {
dat <- dpcR::sim_adpcr(m = base_number, n = size, times = 10000, pos_sums = FALSE,
n_panels = 1)
dat2 <- dat
ids <- sample(1L:size, added_molecules)
dat2[ids, ] <- dat2[ids, ] + 1
#sample added below to reshuffle positive wells
counts_data <- data.frame(experiment = c(rep("baseline", size), rep("modyfied", size)),
counts = as.numeric(c(as.vector(dat) > 0,
sample(as.vector(dat2)) > 0)))
fit <- glm(counts ~ experiment + 0, data = counts_data, family = quasipoisson)
multcomp:::summary.glht(multcomp::glht(fit, linfct = multcomp::mcp(experiment = "Tukey")))[["test"]][["pvalues"]]
})
})
})
cl <- makeCluster(getOption("cl.cores", 4))
system.time(tmp <- test_dpcr(10000, 40, cl))
stopCluster(cl)
cl <- makeCluster(getOption("cl.cores", 4))
clusterEvalQ(cl, {
## set up each worker.  Could also use clusterExport()
library(dpcR)
library(multcomp)
NULL
})
system.time(tmp <- test_dpcr(10000, 40, cl))
1385.46*1000
1385.46*1000/3600
system.time(tmp <- test_dpcr_slow(10000, 4, cl))
system.time(tmp <- test_dpcr_slow(10000, 4))
180.81 *10
cl
?makeCluster
stopCluster(cl)
getMPIcluster()
detectCores()
stopCluster(cl)
cl <- makePVMcluster(4)
cl <- makeMPIcluster(4)
cl <- makeCluster(4)
clusterEvalQ(cl, {
## set up each worker.  Could also use clusterExport()
library(dpcR)
library(multcomp)
NULL
})
system.time(tmp <- test_dpcr_slow(1000, 4))
system.time(tmp <- test_dpcr(1000, 4, cl))
stopCluster(cl)
cl <- makeCluster(4)
clusterEvalQ(cl, {
library(dpcR)
library(multcomp)
NULL
})
#system.time(tmp <- test_dpcr_slow(1000, 4))
system.time(tmp <- test_dpcr(10000, 4, cl))
stopCluster(cl)
137.28*1000
137.28*1000/3600
cl <- makeCluster(6)
clusterEvalQ(cl, {
library(dpcR)
library(multcomp)
NULL
})
#system.time(tmp <- test_dpcr_slow(1000, 4))
system.time(tmp <- test_dpcr(10000, 4, cl))
system.time(tmp <- test_dpcr(5000, 4, cl))
stopCluster(cl)
save(test1, test2, test3, file = "dpcrposter_data.RData")
getGeneric("[")
